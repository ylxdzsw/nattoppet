[require]=
const {opts: [id], args: [file]} = std_call()
const content = read(file)
switch (extname(file)) {
    case 'less':
        `<style ${id ? `id="${id}"` : ''}>${render_less(content)}</style>`; break
    case 'css':
        `<style ${id ? `id="${id}"` : ''}>${content}</style>`; break
    case 'coffee':
        `<script ${id ? `id="${id}"` : ''}>${render_coffee(content, { bare: true })}</script>`; break
    case 'js':
        `<script ${id ? `id="${id}"` : ''}>${content}</script>`; break
    case 'md':
        render_markdown(content); break
    case 'wasm':
        `<script type="module" ${id ? `id="${id}"` : ''}>
            const ready = (async () => {
                const raw = await fetch("data:application/octet-stream;base64,${read(file, 'compressed-base64')}")
                const blob = await raw.blob()
                const decompressed = await blob.stream().pipeThrough(new DecompressionStream("deflate-raw"))
                const response = new Response(decompressed, { headers: { 'Content-Type': 'application/wasm' } })
                const x = await WebAssembly.instantiateStreaming(response, {})
                window.${file.match(/([^\/]+).wasm$/)[1]} = x.instance.exports
            })()
            window.wasm_ready = window.wasm_ready ? Promise.all([window.wasm_ready, ready]) : ready
        </script>`; break
    case 'json':
        `<script type="module" ${id ? `id="${id}"` : ''}>
            const ready = (async () => {
                const raw = await fetch("data:application/octet-stream;base64,${read(file, 'compressed-base64')}")
                const blob = await raw.blob()
                const decompressed = await blob.stream().pipeThrough(new DecompressionStream("deflate-raw"))
                const response = new Response(decompressed, { headers: { 'Content-Type': 'application/json' } })
                window.${file.match(/([^\/]+).json$/)[1]} = await response.json()
            })()
            window.json_ready = window.json_ready ? Promise.all([window.json_ready, ready]) : ready
        </script>`; break
    default:
        content; break
}

[img]=
const {opts, args: [file, alt]} = std_call()
const classes = opts.join(' ')
const mimesuf = extname(file) == 'svg' ? 'svg+xml' : extname(file)
const content = `data:image/${mimesuf};base64,` + read(file, 'base64')
const htmltag = `<img class="${classes}" src="${content}" alt="${alt || ''}"/>`
opts.includes('center') ? `<div style="text-align:center">${htmltag}</div>` : htmltag

[h2]= `<h2>${interpret(capture_until('\n'))}</h2>`
[h3]= `<h3>${interpret(capture_until('\n'))}</h3>`
[h4]= `<h4>${interpret(capture_until('\n'))}</h4>`

[quote]=
const {opts, block} = std_call(true)
;`<blockquote class="${opts.join(' ')}">${interpret(block)}</blockquote>`

[#]= std_call(true), ''

[-]=
const {opts, block} = std_call(true)
;`<li class="${opts.join(' ')}">${interpret(block)}</li>`

[file]=
const {args: [file, text]} = std_call()
const content = "data:application/octet-stream;base64," + read(file, 'base64')
;`<a download="${basename(file)}" href="${content}">${text ? interpret(text) : basename(file)}</a>`

[code]=
const {opts: [language], args: [content], block} = std_call()
const code = `<code ${language ? `class="language-${language}"` : ''}>${content || block.slice(1)}</code>`
content ? code : `<pre>${code}</pre>`

[link]=
const {opts: [id], args: [href, text]} = std_call()
const content = text || capture_until('\n').trim() || href
;`<a ${id ? `id="${id}"` : ''} href="${href}">${interpret(content)}</a>`

[sup]=
const {args: [text]} = std_call()
;`<sup>${interpret(text)}</sup>`

[eval]=
const {block} = std_call(true)
eval(block)

[eval*]=
const {block} = std_call(true)
eval(block); ''

[cn]=
interpret(std_call().block)
    .replace(/([\u4E00-\u9FCC\u3400-\u4DB5\uFA0E\uFA0F\uFA11\uFA13\uFA14\uFA1F\uFA21\uFA23\uFA24\uFA27-\uFA29]|[\ud840-\ud868][\udc00-\udfff]|\ud869[\udc00-\uded6\udf00-\udfff]|[\ud86a-\ud86c][\udc00-\udfff]|\ud86d[\udc00-\udf34\udf40-\udfff]|\ud86e[\udc00-\udc1d])\r?\n(?=\S)/g, '$1')
    .replace(/(?<=\S)\r?\n([\u4E00-\u9FCC\u3400-\u4DB5\uFA0E\uFA0F\uFA11\uFA13\uFA14\uFA1F\uFA21\uFA23\uFA24\uFA27-\uFA29]|[\ud840-\ud868][\udc00-\udfff]|\ud869[\udc00-\uded6\udf00-\udfff]|[\ud86a-\ud86c][\udc00-\udfff]|\ud86d[\udc00-\udf34\udf40-\udfff]|\ud86e[\udc00-\udc1d])/g, '$1')
